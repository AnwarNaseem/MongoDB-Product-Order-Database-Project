// ProductOrder database, there are mainly four categories of information:
//● Product information
//● Inventory information
//● User information
//● Order information

// 1. Open VS Code and connect to MONGODB
db.getMongo().getDBs();
// show dbs;
//2. Create a database "ProductOrder" and create collections "Product","Inventory","User", and "Order" in it.
use ('ProductOrder'); // Create a database 
// create collections
db.createCollection("Product");
db.createCollection("Inventory");
db.createCollection("User");
db.createCollection("Order");
// 3. Display the first 5 rows of product, inventory, user, and order collection. 
use ('ProductOrder');
db.getCollection("Product").find().limit(5);

use('ProductOrder');
db.getCollection("Inventory").find().limit(5);

use('ProductOrder');
db.getCollection("User").find().limit(5);

use('ProductOrder');
db.getCollection("Order").find().limit(5);

//5. Display the Unique Brand and Model names from the Product collection.
use('ProductOrder');
db.Product.distinct('brand');

use('ProductOrder');
db.Product.distinct('model');

// 6. Find the maximum and minimum price of the given products. 

use('ProductOrder');
db.Product.find().sort({price:-1}).limit(1) //MAX

use('ProductOrder');
db.Product.find().sort({price:1}).limit(1) //MIN

// 7. Display the quantity and last_updated date and time for sku "SNY-11001". 

use('ProductOrder');
db.Inventory.find({"sku":"SNY-11001"},
                {_id:0,quantity:1,last_updated:1});

// 8. List down the count of the total number of users whose role is identified as 'Supplier' from User collection 

use('ProductOrder');
db.User.find({"role":"Supplier"}).count();

// 9. Display 'sku', 'code', 'price', 'brand' and 'warranty' information for the model 'Bravia-X'

use('ProductOrder');
db.Product.find({"model":"Bravia-X"},
        {_id:0,sku:1,code:1,price:1,brand:1,warranty:1});

// 10. Find all the information of Sony products which have an Price greater than 1 lakh 

use('ProductOrder');
db.Product.find({$and:
    [{"brand":"Sony"},{price: {$gt : 100000}}]});

// 11. Find the total no of products by each Brand and sort them in descending order. 

use('ProductOrder');
db.Product.aggregate([
    { 
      $match: { }
    },
    {
      $group: { _id: "$brand", count: {$sum: 1}}},
    {
      $sort :{ count: -1}
    }
]);


// 12. Find the total no of users by each role, sort them is descending order and save the results in the temporary collection

use('ProductOrder');
db.User.aggregate(
    [{$group: {_id: "$role",count: {$sum: 1}}},
    {$sort:{'count':-1,_id:1}}]).forEach(function(myDocument) {db.temp.insertOne(myDocument);});
db.getCollectionNames();
db.temp.find()


use('ProductOrder');
db.User.aggregate(
    [{$group:{_id: "$role",count:{$sum:1}}},
    {$sort:{'count':-1,_id:1}},
    {$out:"user_count_by_role"}
])
db.user_count_by_role.find()